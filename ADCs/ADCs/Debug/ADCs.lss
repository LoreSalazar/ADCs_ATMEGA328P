
ADCs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000494  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000420  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000494  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000741  00000000  00000000  00000534  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000678  00000000  00000000  00000c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000251  00000000  00000000  000012ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00001540  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c2  00000000  00000000  00001598  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000127  00000000  00000000  0000195a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001a81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 61 00 	call	0xc2	; 0xc2 <main>
  88:	0c 94 0e 02 	jmp	0x41c	; 0x41c <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z7readADCi>:
	return 0;
}

float readADC(int channel) {
	//Select ADC channel
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);  //Clear the lowest 4 bits of ADMUX and set the channel
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	90 81       	ld	r25, Z
  96:	90 7f       	andi	r25, 0xF0	; 240
  98:	8f 70       	andi	r24, 0x0F	; 15
  9a:	89 2b       	or	r24, r25
  9c:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC);  //Start the conversion
  9e:	ea e7       	ldi	r30, 0x7A	; 122
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	80 64       	ori	r24, 0x40	; 64
  a6:	80 83       	st	Z, r24

	while (ADCSRA & (1 << ADSC));  //Wait until ADSC goes to 0
  a8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ac:	86 fd       	sbrc	r24, 6
  ae:	fc cf       	rjmp	.-8      	; 0xa8 <_Z7readADCi+0x18>

	return ADC;
  b0:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  b4:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <__floatunsisf>
}
  c0:	08 95       	ret

000000c2 <main>:

float readADC(int channel);
volatile int flag = 0;

int main(void) {
	cli();  //Disable global interrupts
  c2:	f8 94       	cli

	DDRD |= (1<<5);  // PORTD pin 5 as output
  c4:	8a b1       	in	r24, 0x0a	; 10
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<7);  // PORTD pin 7 as output
  ca:	8a b1       	in	r24, 0x0a	; 10
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<0);  // PORTD pin 0 as output
  d0:	8a b1       	in	r24, 0x0a	; 10
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	8a b9       	out	0x0a, r24	; 10

	/*************** REFSn:?Reference Selection [n = 1:0] ************/
	ADMUX &=~ (1<<REFS1); //AVCC with external capacitor at AREF pin
  d6:	ec e7       	ldi	r30, 0x7C	; 124
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	80 81       	ld	r24, Z
  dc:	8f 77       	andi	r24, 0x7F	; 127
  de:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);
  e0:	80 81       	ld	r24, Z
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	80 83       	st	Z, r24
	
	/*************** ADLAR:?ADC Left Adjust Result *******************/
	ADMUX &=~ (1 << ADLAR); //ADCH
  e6:	80 81       	ld	r24, Z
  e8:	8f 7d       	andi	r24, 0xDF	; 223
  ea:	80 83       	st	Z, r24
	
	/*************** ADEN:?ADC Enable *******************************/
	ADCSRA |= (1<<ADEN);
  ec:	ea e7       	ldi	r30, 0x7A	; 122
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 68       	ori	r24, 0x80	; 128
  f4:	80 83       	st	Z, r24
	
	/*************** ADPSn:?ADC Prescaler Select [n = 2:0] **********/
	ADCSRA |= (1<<ADPS2); //16
  f6:	80 81       	ld	r24, Z
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	80 83       	st	Z, r24
	ADCSRA &=~ (1<<ADPS1);
  fc:	80 81       	ld	r24, Z
  fe:	8d 7f       	andi	r24, 0xFD	; 253
 100:	80 83       	st	Z, r24
	ADCSRA &=~ (1<<ADPS0);
 102:	80 81       	ld	r24, Z
 104:	8e 7f       	andi	r24, 0xFE	; 254
 106:	80 83       	st	Z, r24

	float adc1 = 0, adc2 = 0, voltage1 = 0, voltage2 = 0;
	
	ADCSRA |= (1<<ADIE); //ADC Conversion Complete Interrupt is activated
 108:	80 81       	ld	r24, Z
 10a:	88 60       	ori	r24, 0x08	; 8
 10c:	80 83       	st	Z, r24

	sei();  //Enable global interrupts
 10e:	78 94       	sei

	while (1) {

		adc1 = readADC(0); 
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	0e 94 48 00 	call	0x90	; 0x90 <_Z7readADCi>
		voltage1 = (adc1 * 5.0) / 1024.0;   
 118:	20 e0       	ldi	r18, 0x00	; 0
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	40 ea       	ldi	r20, 0xA0	; 160
 11e:	50 e4       	ldi	r21, 0x40	; 64
 120:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__mulsf3>
 124:	20 e0       	ldi	r18, 0x00	; 0
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	40 e8       	ldi	r20, 0x80	; 128
 12a:	5a e3       	ldi	r21, 0x3A	; 58
 12c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__mulsf3>

		if (voltage1 >= 3.0) {
 130:	20 e0       	ldi	r18, 0x00	; 0
 132:	30 e0       	ldi	r19, 0x00	; 0
 134:	40 e4       	ldi	r20, 0x40	; 64
 136:	50 e4       	ldi	r21, 0x40	; 64
 138:	0e 94 4b 01 	call	0x296	; 0x296 <__gesf2>
 13c:	88 23       	and	r24, r24
 13e:	24 f0       	brlt	.+8      	; 0x148 <main+0x86>
			PORTD |= (1<<5);  
 140:	8b b1       	in	r24, 0x0b	; 11
 142:	80 62       	ori	r24, 0x20	; 32
 144:	8b b9       	out	0x0b, r24	; 11
 146:	03 c0       	rjmp	.+6      	; 0x14e <main+0x8c>
		}else{
			PORTD &=~ (1<<5);  
 148:	8b b1       	in	r24, 0x0b	; 11
 14a:	8f 7d       	andi	r24, 0xDF	; 223
 14c:	8b b9       	out	0x0b, r24	; 11
		}
				
		adc2= readADC(2);
 14e:	82 e0       	ldi	r24, 0x02	; 2
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	0e 94 48 00 	call	0x90	; 0x90 <_Z7readADCi>
		voltage2 = (adc2 * 5.0) / 1024.0;
 156:	20 e0       	ldi	r18, 0x00	; 0
 158:	30 e0       	ldi	r19, 0x00	; 0
 15a:	40 ea       	ldi	r20, 0xA0	; 160
 15c:	50 e4       	ldi	r21, 0x40	; 64
 15e:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__mulsf3>
 162:	20 e0       	ldi	r18, 0x00	; 0
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	40 e8       	ldi	r20, 0x80	; 128
 168:	5a e3       	ldi	r21, 0x3A	; 58
 16a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__mulsf3>

		if (voltage2 <= 3.0) {
 16e:	20 e0       	ldi	r18, 0x00	; 0
 170:	30 e0       	ldi	r19, 0x00	; 0
 172:	40 e4       	ldi	r20, 0x40	; 64
 174:	50 e4       	ldi	r21, 0x40	; 64
 176:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__cmpsf2>
 17a:	18 16       	cp	r1, r24
 17c:	24 f0       	brlt	.+8      	; 0x186 <main+0xc4>
			PORTD |= (1<<7);  
 17e:	8b b1       	in	r24, 0x0b	; 11
 180:	80 68       	ori	r24, 0x80	; 128
 182:	8b b9       	out	0x0b, r24	; 11
 184:	03 c0       	rjmp	.+6      	; 0x18c <main+0xca>
		}else{
			PORTD &=~ (1<<7);  
 186:	8b b1       	in	r24, 0x0b	; 11
 188:	8f 77       	andi	r24, 0x7F	; 127
 18a:	8b b9       	out	0x0b, r24	; 11
		}
		
		if(flag == 1){
 18c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 190:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	09 f0       	breq	.+2      	; 0x19a <main+0xd8>
 198:	bb cf       	rjmp	.-138    	; 0x110 <main+0x4e>
			PORTD |= (1<<0);	
 19a:	8b b1       	in	r24, 0x0b	; 11
 19c:	81 60       	ori	r24, 0x01	; 1
 19e:	8b b9       	out	0x0b, r24	; 11
 1a0:	b7 cf       	rjmp	.-146    	; 0x110 <main+0x4e>

000001a2 <__vector_21>:
	while (ADCSRA & (1 << ADSC));  //Wait until ADSC goes to 0

	return ADC;
}

ISR(ADC_vect){
 1a2:	1f 92       	push	r1
 1a4:	0f 92       	push	r0
 1a6:	0f b6       	in	r0, 0x3f	; 63
 1a8:	0f 92       	push	r0
 1aa:	11 24       	eor	r1, r1
 1ac:	8f 93       	push	r24
 1ae:	9f 93       	push	r25
	flag = 1;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
}
 1bc:	9f 91       	pop	r25
 1be:	8f 91       	pop	r24
 1c0:	0f 90       	pop	r0
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	0f 90       	pop	r0
 1c6:	1f 90       	pop	r1
 1c8:	18 95       	reti

000001ca <__cmpsf2>:
 1ca:	0e 94 27 01 	call	0x24e	; 0x24e <__fp_cmp>
 1ce:	08 f4       	brcc	.+2      	; 0x1d2 <__cmpsf2+0x8>
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	08 95       	ret

000001d4 <__floatunsisf>:
 1d4:	e8 94       	clt
 1d6:	09 c0       	rjmp	.+18     	; 0x1ea <__floatsisf+0x12>

000001d8 <__floatsisf>:
 1d8:	97 fb       	bst	r25, 7
 1da:	3e f4       	brtc	.+14     	; 0x1ea <__floatsisf+0x12>
 1dc:	90 95       	com	r25
 1de:	80 95       	com	r24
 1e0:	70 95       	com	r23
 1e2:	61 95       	neg	r22
 1e4:	7f 4f       	sbci	r23, 0xFF	; 255
 1e6:	8f 4f       	sbci	r24, 0xFF	; 255
 1e8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ea:	99 23       	and	r25, r25
 1ec:	a9 f0       	breq	.+42     	; 0x218 <__floatsisf+0x40>
 1ee:	f9 2f       	mov	r31, r25
 1f0:	96 e9       	ldi	r25, 0x96	; 150
 1f2:	bb 27       	eor	r27, r27
 1f4:	93 95       	inc	r25
 1f6:	f6 95       	lsr	r31
 1f8:	87 95       	ror	r24
 1fa:	77 95       	ror	r23
 1fc:	67 95       	ror	r22
 1fe:	b7 95       	ror	r27
 200:	f1 11       	cpse	r31, r1
 202:	f8 cf       	rjmp	.-16     	; 0x1f4 <__floatsisf+0x1c>
 204:	fa f4       	brpl	.+62     	; 0x244 <__floatsisf+0x6c>
 206:	bb 0f       	add	r27, r27
 208:	11 f4       	brne	.+4      	; 0x20e <__floatsisf+0x36>
 20a:	60 ff       	sbrs	r22, 0
 20c:	1b c0       	rjmp	.+54     	; 0x244 <__floatsisf+0x6c>
 20e:	6f 5f       	subi	r22, 0xFF	; 255
 210:	7f 4f       	sbci	r23, 0xFF	; 255
 212:	8f 4f       	sbci	r24, 0xFF	; 255
 214:	9f 4f       	sbci	r25, 0xFF	; 255
 216:	16 c0       	rjmp	.+44     	; 0x244 <__floatsisf+0x6c>
 218:	88 23       	and	r24, r24
 21a:	11 f0       	breq	.+4      	; 0x220 <__floatsisf+0x48>
 21c:	96 e9       	ldi	r25, 0x96	; 150
 21e:	11 c0       	rjmp	.+34     	; 0x242 <__floatsisf+0x6a>
 220:	77 23       	and	r23, r23
 222:	21 f0       	breq	.+8      	; 0x22c <__floatsisf+0x54>
 224:	9e e8       	ldi	r25, 0x8E	; 142
 226:	87 2f       	mov	r24, r23
 228:	76 2f       	mov	r23, r22
 22a:	05 c0       	rjmp	.+10     	; 0x236 <__floatsisf+0x5e>
 22c:	66 23       	and	r22, r22
 22e:	71 f0       	breq	.+28     	; 0x24c <__floatsisf+0x74>
 230:	96 e8       	ldi	r25, 0x86	; 134
 232:	86 2f       	mov	r24, r22
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	2a f0       	brmi	.+10     	; 0x244 <__floatsisf+0x6c>
 23a:	9a 95       	dec	r25
 23c:	66 0f       	add	r22, r22
 23e:	77 1f       	adc	r23, r23
 240:	88 1f       	adc	r24, r24
 242:	da f7       	brpl	.-10     	; 0x23a <__floatsisf+0x62>
 244:	88 0f       	add	r24, r24
 246:	96 95       	lsr	r25
 248:	87 95       	ror	r24
 24a:	97 f9       	bld	r25, 7
 24c:	08 95       	ret

0000024e <__fp_cmp>:
 24e:	99 0f       	add	r25, r25
 250:	00 08       	sbc	r0, r0
 252:	55 0f       	add	r21, r21
 254:	aa 0b       	sbc	r26, r26
 256:	e0 e8       	ldi	r30, 0x80	; 128
 258:	fe ef       	ldi	r31, 0xFE	; 254
 25a:	16 16       	cp	r1, r22
 25c:	17 06       	cpc	r1, r23
 25e:	e8 07       	cpc	r30, r24
 260:	f9 07       	cpc	r31, r25
 262:	c0 f0       	brcs	.+48     	; 0x294 <__fp_cmp+0x46>
 264:	12 16       	cp	r1, r18
 266:	13 06       	cpc	r1, r19
 268:	e4 07       	cpc	r30, r20
 26a:	f5 07       	cpc	r31, r21
 26c:	98 f0       	brcs	.+38     	; 0x294 <__fp_cmp+0x46>
 26e:	62 1b       	sub	r22, r18
 270:	73 0b       	sbc	r23, r19
 272:	84 0b       	sbc	r24, r20
 274:	95 0b       	sbc	r25, r21
 276:	39 f4       	brne	.+14     	; 0x286 <__fp_cmp+0x38>
 278:	0a 26       	eor	r0, r26
 27a:	61 f0       	breq	.+24     	; 0x294 <__fp_cmp+0x46>
 27c:	23 2b       	or	r18, r19
 27e:	24 2b       	or	r18, r20
 280:	25 2b       	or	r18, r21
 282:	21 f4       	brne	.+8      	; 0x28c <__fp_cmp+0x3e>
 284:	08 95       	ret
 286:	0a 26       	eor	r0, r26
 288:	09 f4       	brne	.+2      	; 0x28c <__fp_cmp+0x3e>
 28a:	a1 40       	sbci	r26, 0x01	; 1
 28c:	a6 95       	lsr	r26
 28e:	8f ef       	ldi	r24, 0xFF	; 255
 290:	81 1d       	adc	r24, r1
 292:	81 1d       	adc	r24, r1
 294:	08 95       	ret

00000296 <__gesf2>:
 296:	0e 94 27 01 	call	0x24e	; 0x24e <__fp_cmp>
 29a:	08 f4       	brcc	.+2      	; 0x29e <__gesf2+0x8>
 29c:	8f ef       	ldi	r24, 0xFF	; 255
 29e:	08 95       	ret

000002a0 <__mulsf3>:
 2a0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <__mulsf3x>
 2a4:	0c 94 d4 01 	jmp	0x3a8	; 0x3a8 <__fp_round>
 2a8:	0e 94 c6 01 	call	0x38c	; 0x38c <__fp_pscA>
 2ac:	38 f0       	brcs	.+14     	; 0x2bc <__mulsf3+0x1c>
 2ae:	0e 94 cd 01 	call	0x39a	; 0x39a <__fp_pscB>
 2b2:	20 f0       	brcs	.+8      	; 0x2bc <__mulsf3+0x1c>
 2b4:	95 23       	and	r25, r21
 2b6:	11 f0       	breq	.+4      	; 0x2bc <__mulsf3+0x1c>
 2b8:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__fp_inf>
 2bc:	0c 94 c3 01 	jmp	0x386	; 0x386 <__fp_nan>
 2c0:	11 24       	eor	r1, r1
 2c2:	0c 94 08 02 	jmp	0x410	; 0x410 <__fp_szero>

000002c6 <__mulsf3x>:
 2c6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__fp_split3>
 2ca:	70 f3       	brcs	.-36     	; 0x2a8 <__mulsf3+0x8>

000002cc <__mulsf3_pse>:
 2cc:	95 9f       	mul	r25, r21
 2ce:	c1 f3       	breq	.-16     	; 0x2c0 <__mulsf3+0x20>
 2d0:	95 0f       	add	r25, r21
 2d2:	50 e0       	ldi	r21, 0x00	; 0
 2d4:	55 1f       	adc	r21, r21
 2d6:	62 9f       	mul	r22, r18
 2d8:	f0 01       	movw	r30, r0
 2da:	72 9f       	mul	r23, r18
 2dc:	bb 27       	eor	r27, r27
 2de:	f0 0d       	add	r31, r0
 2e0:	b1 1d       	adc	r27, r1
 2e2:	63 9f       	mul	r22, r19
 2e4:	aa 27       	eor	r26, r26
 2e6:	f0 0d       	add	r31, r0
 2e8:	b1 1d       	adc	r27, r1
 2ea:	aa 1f       	adc	r26, r26
 2ec:	64 9f       	mul	r22, r20
 2ee:	66 27       	eor	r22, r22
 2f0:	b0 0d       	add	r27, r0
 2f2:	a1 1d       	adc	r26, r1
 2f4:	66 1f       	adc	r22, r22
 2f6:	82 9f       	mul	r24, r18
 2f8:	22 27       	eor	r18, r18
 2fa:	b0 0d       	add	r27, r0
 2fc:	a1 1d       	adc	r26, r1
 2fe:	62 1f       	adc	r22, r18
 300:	73 9f       	mul	r23, r19
 302:	b0 0d       	add	r27, r0
 304:	a1 1d       	adc	r26, r1
 306:	62 1f       	adc	r22, r18
 308:	83 9f       	mul	r24, r19
 30a:	a0 0d       	add	r26, r0
 30c:	61 1d       	adc	r22, r1
 30e:	22 1f       	adc	r18, r18
 310:	74 9f       	mul	r23, r20
 312:	33 27       	eor	r19, r19
 314:	a0 0d       	add	r26, r0
 316:	61 1d       	adc	r22, r1
 318:	23 1f       	adc	r18, r19
 31a:	84 9f       	mul	r24, r20
 31c:	60 0d       	add	r22, r0
 31e:	21 1d       	adc	r18, r1
 320:	82 2f       	mov	r24, r18
 322:	76 2f       	mov	r23, r22
 324:	6a 2f       	mov	r22, r26
 326:	11 24       	eor	r1, r1
 328:	9f 57       	subi	r25, 0x7F	; 127
 32a:	50 40       	sbci	r21, 0x00	; 0
 32c:	9a f0       	brmi	.+38     	; 0x354 <__mulsf3_pse+0x88>
 32e:	f1 f0       	breq	.+60     	; 0x36c <__mulsf3_pse+0xa0>
 330:	88 23       	and	r24, r24
 332:	4a f0       	brmi	.+18     	; 0x346 <__mulsf3_pse+0x7a>
 334:	ee 0f       	add	r30, r30
 336:	ff 1f       	adc	r31, r31
 338:	bb 1f       	adc	r27, r27
 33a:	66 1f       	adc	r22, r22
 33c:	77 1f       	adc	r23, r23
 33e:	88 1f       	adc	r24, r24
 340:	91 50       	subi	r25, 0x01	; 1
 342:	50 40       	sbci	r21, 0x00	; 0
 344:	a9 f7       	brne	.-22     	; 0x330 <__mulsf3_pse+0x64>
 346:	9e 3f       	cpi	r25, 0xFE	; 254
 348:	51 05       	cpc	r21, r1
 34a:	80 f0       	brcs	.+32     	; 0x36c <__mulsf3_pse+0xa0>
 34c:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__fp_inf>
 350:	0c 94 08 02 	jmp	0x410	; 0x410 <__fp_szero>
 354:	5f 3f       	cpi	r21, 0xFF	; 255
 356:	e4 f3       	brlt	.-8      	; 0x350 <__mulsf3_pse+0x84>
 358:	98 3e       	cpi	r25, 0xE8	; 232
 35a:	d4 f3       	brlt	.-12     	; 0x350 <__mulsf3_pse+0x84>
 35c:	86 95       	lsr	r24
 35e:	77 95       	ror	r23
 360:	67 95       	ror	r22
 362:	b7 95       	ror	r27
 364:	f7 95       	ror	r31
 366:	e7 95       	ror	r30
 368:	9f 5f       	subi	r25, 0xFF	; 255
 36a:	c1 f7       	brne	.-16     	; 0x35c <__mulsf3_pse+0x90>
 36c:	fe 2b       	or	r31, r30
 36e:	88 0f       	add	r24, r24
 370:	91 1d       	adc	r25, r1
 372:	96 95       	lsr	r25
 374:	87 95       	ror	r24
 376:	97 f9       	bld	r25, 7
 378:	08 95       	ret

0000037a <__fp_inf>:
 37a:	97 f9       	bld	r25, 7
 37c:	9f 67       	ori	r25, 0x7F	; 127
 37e:	80 e8       	ldi	r24, 0x80	; 128
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	60 e0       	ldi	r22, 0x00	; 0
 384:	08 95       	ret

00000386 <__fp_nan>:
 386:	9f ef       	ldi	r25, 0xFF	; 255
 388:	80 ec       	ldi	r24, 0xC0	; 192
 38a:	08 95       	ret

0000038c <__fp_pscA>:
 38c:	00 24       	eor	r0, r0
 38e:	0a 94       	dec	r0
 390:	16 16       	cp	r1, r22
 392:	17 06       	cpc	r1, r23
 394:	18 06       	cpc	r1, r24
 396:	09 06       	cpc	r0, r25
 398:	08 95       	ret

0000039a <__fp_pscB>:
 39a:	00 24       	eor	r0, r0
 39c:	0a 94       	dec	r0
 39e:	12 16       	cp	r1, r18
 3a0:	13 06       	cpc	r1, r19
 3a2:	14 06       	cpc	r1, r20
 3a4:	05 06       	cpc	r0, r21
 3a6:	08 95       	ret

000003a8 <__fp_round>:
 3a8:	09 2e       	mov	r0, r25
 3aa:	03 94       	inc	r0
 3ac:	00 0c       	add	r0, r0
 3ae:	11 f4       	brne	.+4      	; 0x3b4 <__fp_round+0xc>
 3b0:	88 23       	and	r24, r24
 3b2:	52 f0       	brmi	.+20     	; 0x3c8 <__fp_round+0x20>
 3b4:	bb 0f       	add	r27, r27
 3b6:	40 f4       	brcc	.+16     	; 0x3c8 <__fp_round+0x20>
 3b8:	bf 2b       	or	r27, r31
 3ba:	11 f4       	brne	.+4      	; 0x3c0 <__fp_round+0x18>
 3bc:	60 ff       	sbrs	r22, 0
 3be:	04 c0       	rjmp	.+8      	; 0x3c8 <__fp_round+0x20>
 3c0:	6f 5f       	subi	r22, 0xFF	; 255
 3c2:	7f 4f       	sbci	r23, 0xFF	; 255
 3c4:	8f 4f       	sbci	r24, 0xFF	; 255
 3c6:	9f 4f       	sbci	r25, 0xFF	; 255
 3c8:	08 95       	ret

000003ca <__fp_split3>:
 3ca:	57 fd       	sbrc	r21, 7
 3cc:	90 58       	subi	r25, 0x80	; 128
 3ce:	44 0f       	add	r20, r20
 3d0:	55 1f       	adc	r21, r21
 3d2:	59 f0       	breq	.+22     	; 0x3ea <__fp_splitA+0x10>
 3d4:	5f 3f       	cpi	r21, 0xFF	; 255
 3d6:	71 f0       	breq	.+28     	; 0x3f4 <__fp_splitA+0x1a>
 3d8:	47 95       	ror	r20

000003da <__fp_splitA>:
 3da:	88 0f       	add	r24, r24
 3dc:	97 fb       	bst	r25, 7
 3de:	99 1f       	adc	r25, r25
 3e0:	61 f0       	breq	.+24     	; 0x3fa <__fp_splitA+0x20>
 3e2:	9f 3f       	cpi	r25, 0xFF	; 255
 3e4:	79 f0       	breq	.+30     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3e6:	87 95       	ror	r24
 3e8:	08 95       	ret
 3ea:	12 16       	cp	r1, r18
 3ec:	13 06       	cpc	r1, r19
 3ee:	14 06       	cpc	r1, r20
 3f0:	55 1f       	adc	r21, r21
 3f2:	f2 cf       	rjmp	.-28     	; 0x3d8 <__fp_split3+0xe>
 3f4:	46 95       	lsr	r20
 3f6:	f1 df       	rcall	.-30     	; 0x3da <__fp_splitA>
 3f8:	08 c0       	rjmp	.+16     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 3fa:	16 16       	cp	r1, r22
 3fc:	17 06       	cpc	r1, r23
 3fe:	18 06       	cpc	r1, r24
 400:	99 1f       	adc	r25, r25
 402:	f1 cf       	rjmp	.-30     	; 0x3e6 <__fp_splitA+0xc>
 404:	86 95       	lsr	r24
 406:	71 05       	cpc	r23, r1
 408:	61 05       	cpc	r22, r1
 40a:	08 94       	sec
 40c:	08 95       	ret

0000040e <__fp_zero>:
 40e:	e8 94       	clt

00000410 <__fp_szero>:
 410:	bb 27       	eor	r27, r27
 412:	66 27       	eor	r22, r22
 414:	77 27       	eor	r23, r23
 416:	cb 01       	movw	r24, r22
 418:	97 f9       	bld	r25, 7
 41a:	08 95       	ret

0000041c <_exit>:
 41c:	f8 94       	cli

0000041e <__stop_program>:
 41e:	ff cf       	rjmp	.-2      	; 0x41e <__stop_program>
