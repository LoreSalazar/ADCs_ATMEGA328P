
ADCs.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000046c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000418  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072a  00000000  00000000  0000050c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000660  00000000  00000000  00000c36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000257  00000000  00000000  00001296  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000014f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003bd  00000000  00000000  00001544  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000011a  00000000  00000000  00001901  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001a1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <__vector_21>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  78:	0c 94 0a 02 	jmp	0x414	; 0x414 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z7readADCi>:
	return 0;
}

float readADC(int channel) {
	//Select ADC channel
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);  //Clear the lowest 4 bits of ADMUX and set the channel
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	90 81       	ld	r25, Z
  86:	90 7f       	andi	r25, 0xF0	; 240
  88:	8f 70       	andi	r24, 0x0F	; 15
  8a:	89 2b       	or	r24, r25
  8c:	80 83       	st	Z, r24

	ADCSRA |= (1 << ADSC);  //Start the conversion
  8e:	ea e7       	ldi	r30, 0x7A	; 122
  90:	f0 e0       	ldi	r31, 0x00	; 0
  92:	80 81       	ld	r24, Z
  94:	80 64       	ori	r24, 0x40	; 64
  96:	80 83       	st	Z, r24

	while (ADCSRA & (1 << ADSC));  //Wait until ADSC goes to 0
  98:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  9c:	86 fd       	sbrc	r24, 6
  9e:	fc cf       	rjmp	.-8      	; 0x98 <_Z7readADCi+0x18>

	return ADC;
  a0:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  a4:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	0e 94 e6 00 	call	0x1cc	; 0x1cc <__floatunsisf>
}
  b0:	08 95       	ret

000000b2 <main>:
#include <util/delay.h>

float readADC(int channel);

int main(void) {
	cli();  //Disable global interrupts
  b2:	f8 94       	cli

	DDRD |= (1<<5);  // PORTD pin 5 as output
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<7);  // PORTD pin 7 as output
  ba:	8a b1       	in	r24, 0x0a	; 10
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	8a b9       	out	0x0a, r24	; 10
	DDRD |= (1<<0);  // PORTD pin 0 as output
  c0:	8a b1       	in	r24, 0x0a	; 10
  c2:	81 60       	ori	r24, 0x01	; 1
  c4:	8a b9       	out	0x0a, r24	; 10

	/*************** REFSn:?Reference Selection [n = 1:0] ************/
	ADMUX &=~ (1<<REFS1); //AVCC with external capacitor at AREF pin
  c6:	ec e7       	ldi	r30, 0x7C	; 124
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	8f 77       	andi	r24, 0x7F	; 127
  ce:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);
  d0:	80 81       	ld	r24, Z
  d2:	80 64       	ori	r24, 0x40	; 64
  d4:	80 83       	st	Z, r24
	
	/*************** ADLAR:?ADC Left Adjust Result *******************/
	ADMUX &=~ (1 << ADLAR); //ADCH
  d6:	80 81       	ld	r24, Z
  d8:	8f 7d       	andi	r24, 0xDF	; 223
  da:	80 83       	st	Z, r24
	
	/*************** ADEN:?ADC Enable *******************************/
	ADCSRA |= (1<<ADEN);
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	80 83       	st	Z, r24
	
	/*************** ADATE:?ADC Auto Trigger Enable *****************/
	ADCSRA |= (1<<ADATE); // When this bit is written to one, Auto Triggering of the ADC is enabled
  e6:	80 81       	ld	r24, Z
  e8:	80 62       	ori	r24, 0x20	; 32
  ea:	80 83       	st	Z, r24
	/*************** ADTSn:?ADC Auto Trigger Source [n = 2:0] *******/
	ADCSRB &=~ (1<<ADTS2); //Free Running mode
  ec:	ab e7       	ldi	r26, 0x7B	; 123
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	8c 91       	ld	r24, X
  f2:	8b 7f       	andi	r24, 0xFB	; 251
  f4:	8c 93       	st	X, r24
	ADCSRB &=~ (1<<ADTS1);
  f6:	8c 91       	ld	r24, X
  f8:	8d 7f       	andi	r24, 0xFD	; 253
  fa:	8c 93       	st	X, r24
	ADCSRB &=~ (1<<ADTS0);
  fc:	8c 91       	ld	r24, X
  fe:	8e 7f       	andi	r24, 0xFE	; 254
 100:	8c 93       	st	X, r24
	
	/*************** ADPSn:?ADC Prescaler Select [n = 2:0] **********/
	ADCSRA |= (1<<ADPS2);
 102:	80 81       	ld	r24, Z
 104:	84 60       	ori	r24, 0x04	; 4
 106:	80 83       	st	Z, r24
	ADCSRA &=~ (1<<ADPS1);
 108:	80 81       	ld	r24, Z
 10a:	8d 7f       	andi	r24, 0xFD	; 253
 10c:	80 83       	st	Z, r24
	ADCSRA &=~ (1<<ADPS0);
 10e:	80 81       	ld	r24, Z
 110:	8e 7f       	andi	r24, 0xFE	; 254
 112:	80 83       	st	Z, r24

	float adc1 = 0, adc2 = 0;
	float voltage1 = 0, voltage2 = 0;
	
		adc1 = readADC(0);
 114:	80 e0       	ldi	r24, 0x00	; 0
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	0e 94 40 00 	call	0x80	; 0x80 <_Z7readADCi>
		voltage1 = (adc1 * 5.0) / 1024.0;
 11c:	20 e0       	ldi	r18, 0x00	; 0
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	40 ea       	ldi	r20, 0xA0	; 160
 122:	50 e4       	ldi	r21, 0x40	; 64
 124:	0e 94 4c 01 	call	0x298	; 0x298 <__mulsf3>
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	40 e8       	ldi	r20, 0x80	; 128
 12e:	5a e3       	ldi	r21, 0x3A	; 58
 130:	0e 94 4c 01 	call	0x298	; 0x298 <__mulsf3>
 134:	4b 01       	movw	r8, r22
 136:	5c 01       	movw	r10, r24

		adc2= readADC(2);
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 40 00 	call	0x80	; 0x80 <_Z7readADCi>
		voltage2 = (adc2 * 5.0) / 1024.0;
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	40 ea       	ldi	r20, 0xA0	; 160
 146:	50 e4       	ldi	r21, 0x40	; 64
 148:	0e 94 4c 01 	call	0x298	; 0x298 <__mulsf3>
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	40 e8       	ldi	r20, 0x80	; 128
 152:	5a e3       	ldi	r21, 0x3A	; 58
 154:	0e 94 4c 01 	call	0x298	; 0x298 <__mulsf3>
 158:	6b 01       	movw	r12, r22
 15a:	7c 01       	movw	r14, r24

		if (voltage1 >= 3.0) {
 15c:	20 e0       	ldi	r18, 0x00	; 0
 15e:	30 e0       	ldi	r19, 0x00	; 0
 160:	40 e4       	ldi	r20, 0x40	; 64
 162:	50 e4       	ldi	r21, 0x40	; 64
 164:	c5 01       	movw	r24, r10
 166:	b4 01       	movw	r22, r8
 168:	0e 94 47 01 	call	0x28e	; 0x28e <__gesf2>
 16c:	88 23       	and	r24, r24
 16e:	24 f0       	brlt	.+8      	; 0x178 <main+0xc6>
			PORTD |= (1<<5);
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	80 62       	ori	r24, 0x20	; 32
 174:	8b b9       	out	0x0b, r24	; 11
 176:	03 c0       	rjmp	.+6      	; 0x17e <main+0xcc>
			}else{
			PORTD &=~ (1<<5);
 178:	8b b1       	in	r24, 0x0b	; 11
 17a:	8f 7d       	andi	r24, 0xDF	; 223
 17c:	8b b9       	out	0x0b, r24	; 11
		}

		if (voltage2 <= 3.0) {
 17e:	20 e0       	ldi	r18, 0x00	; 0
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	40 e4       	ldi	r20, 0x40	; 64
 184:	50 e4       	ldi	r21, 0x40	; 64
 186:	c7 01       	movw	r24, r14
 188:	b6 01       	movw	r22, r12
 18a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <__cmpsf2>
 18e:	18 16       	cp	r1, r24
 190:	24 f0       	brlt	.+8      	; 0x19a <main+0xe8>
			PORTD |= (1<<7);
 192:	8b b1       	in	r24, 0x0b	; 11
 194:	80 68       	ori	r24, 0x80	; 128
 196:	8b b9       	out	0x0b, r24	; 11
 198:	03 c0       	rjmp	.+6      	; 0x1a0 <main+0xee>
			}else{
			PORTD &=~ (1<<7);
 19a:	8b b1       	in	r24, 0x0b	; 11
 19c:	8f 77       	andi	r24, 0x7F	; 127
 19e:	8b b9       	out	0x0b, r24	; 11
		}

	sei();  //Enable global interrupts
 1a0:	78 94       	sei
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <main+0xf0>

000001a4 <__vector_21>:
	while (ADCSRA & (1 << ADSC));  //Wait until ADSC goes to 0

	return ADC;
}

ISR(ADC_vect){
 1a4:	1f 92       	push	r1
 1a6:	0f 92       	push	r0
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	0f 92       	push	r0
 1ac:	11 24       	eor	r1, r1
 1ae:	8f 93       	push	r24

	PORTD |= (1<<0);
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	81 60       	ori	r24, 0x01	; 1
 1b4:	8b b9       	out	0x0b, r24	; 11
	//_delay_ms(300);
	//PORTD &=~ (1<<0);
}
 1b6:	8f 91       	pop	r24
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <__cmpsf2>:
 1c2:	0e 94 23 01 	call	0x246	; 0x246 <__fp_cmp>
 1c6:	08 f4       	brcc	.+2      	; 0x1ca <__cmpsf2+0x8>
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	08 95       	ret

000001cc <__floatunsisf>:
 1cc:	e8 94       	clt
 1ce:	09 c0       	rjmp	.+18     	; 0x1e2 <__floatsisf+0x12>

000001d0 <__floatsisf>:
 1d0:	97 fb       	bst	r25, 7
 1d2:	3e f4       	brtc	.+14     	; 0x1e2 <__floatsisf+0x12>
 1d4:	90 95       	com	r25
 1d6:	80 95       	com	r24
 1d8:	70 95       	com	r23
 1da:	61 95       	neg	r22
 1dc:	7f 4f       	sbci	r23, 0xFF	; 255
 1de:	8f 4f       	sbci	r24, 0xFF	; 255
 1e0:	9f 4f       	sbci	r25, 0xFF	; 255
 1e2:	99 23       	and	r25, r25
 1e4:	a9 f0       	breq	.+42     	; 0x210 <__floatsisf+0x40>
 1e6:	f9 2f       	mov	r31, r25
 1e8:	96 e9       	ldi	r25, 0x96	; 150
 1ea:	bb 27       	eor	r27, r27
 1ec:	93 95       	inc	r25
 1ee:	f6 95       	lsr	r31
 1f0:	87 95       	ror	r24
 1f2:	77 95       	ror	r23
 1f4:	67 95       	ror	r22
 1f6:	b7 95       	ror	r27
 1f8:	f1 11       	cpse	r31, r1
 1fa:	f8 cf       	rjmp	.-16     	; 0x1ec <__floatsisf+0x1c>
 1fc:	fa f4       	brpl	.+62     	; 0x23c <__floatsisf+0x6c>
 1fe:	bb 0f       	add	r27, r27
 200:	11 f4       	brne	.+4      	; 0x206 <__floatsisf+0x36>
 202:	60 ff       	sbrs	r22, 0
 204:	1b c0       	rjmp	.+54     	; 0x23c <__floatsisf+0x6c>
 206:	6f 5f       	subi	r22, 0xFF	; 255
 208:	7f 4f       	sbci	r23, 0xFF	; 255
 20a:	8f 4f       	sbci	r24, 0xFF	; 255
 20c:	9f 4f       	sbci	r25, 0xFF	; 255
 20e:	16 c0       	rjmp	.+44     	; 0x23c <__floatsisf+0x6c>
 210:	88 23       	and	r24, r24
 212:	11 f0       	breq	.+4      	; 0x218 <__floatsisf+0x48>
 214:	96 e9       	ldi	r25, 0x96	; 150
 216:	11 c0       	rjmp	.+34     	; 0x23a <__floatsisf+0x6a>
 218:	77 23       	and	r23, r23
 21a:	21 f0       	breq	.+8      	; 0x224 <__floatsisf+0x54>
 21c:	9e e8       	ldi	r25, 0x8E	; 142
 21e:	87 2f       	mov	r24, r23
 220:	76 2f       	mov	r23, r22
 222:	05 c0       	rjmp	.+10     	; 0x22e <__floatsisf+0x5e>
 224:	66 23       	and	r22, r22
 226:	71 f0       	breq	.+28     	; 0x244 <__floatsisf+0x74>
 228:	96 e8       	ldi	r25, 0x86	; 134
 22a:	86 2f       	mov	r24, r22
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	60 e0       	ldi	r22, 0x00	; 0
 230:	2a f0       	brmi	.+10     	; 0x23c <__floatsisf+0x6c>
 232:	9a 95       	dec	r25
 234:	66 0f       	add	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	88 1f       	adc	r24, r24
 23a:	da f7       	brpl	.-10     	; 0x232 <__floatsisf+0x62>
 23c:	88 0f       	add	r24, r24
 23e:	96 95       	lsr	r25
 240:	87 95       	ror	r24
 242:	97 f9       	bld	r25, 7
 244:	08 95       	ret

00000246 <__fp_cmp>:
 246:	99 0f       	add	r25, r25
 248:	00 08       	sbc	r0, r0
 24a:	55 0f       	add	r21, r21
 24c:	aa 0b       	sbc	r26, r26
 24e:	e0 e8       	ldi	r30, 0x80	; 128
 250:	fe ef       	ldi	r31, 0xFE	; 254
 252:	16 16       	cp	r1, r22
 254:	17 06       	cpc	r1, r23
 256:	e8 07       	cpc	r30, r24
 258:	f9 07       	cpc	r31, r25
 25a:	c0 f0       	brcs	.+48     	; 0x28c <__fp_cmp+0x46>
 25c:	12 16       	cp	r1, r18
 25e:	13 06       	cpc	r1, r19
 260:	e4 07       	cpc	r30, r20
 262:	f5 07       	cpc	r31, r21
 264:	98 f0       	brcs	.+38     	; 0x28c <__fp_cmp+0x46>
 266:	62 1b       	sub	r22, r18
 268:	73 0b       	sbc	r23, r19
 26a:	84 0b       	sbc	r24, r20
 26c:	95 0b       	sbc	r25, r21
 26e:	39 f4       	brne	.+14     	; 0x27e <__fp_cmp+0x38>
 270:	0a 26       	eor	r0, r26
 272:	61 f0       	breq	.+24     	; 0x28c <__fp_cmp+0x46>
 274:	23 2b       	or	r18, r19
 276:	24 2b       	or	r18, r20
 278:	25 2b       	or	r18, r21
 27a:	21 f4       	brne	.+8      	; 0x284 <__fp_cmp+0x3e>
 27c:	08 95       	ret
 27e:	0a 26       	eor	r0, r26
 280:	09 f4       	brne	.+2      	; 0x284 <__fp_cmp+0x3e>
 282:	a1 40       	sbci	r26, 0x01	; 1
 284:	a6 95       	lsr	r26
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	81 1d       	adc	r24, r1
 28a:	81 1d       	adc	r24, r1
 28c:	08 95       	ret

0000028e <__gesf2>:
 28e:	0e 94 23 01 	call	0x246	; 0x246 <__fp_cmp>
 292:	08 f4       	brcc	.+2      	; 0x296 <__gesf2+0x8>
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	08 95       	ret

00000298 <__mulsf3>:
 298:	0e 94 5f 01 	call	0x2be	; 0x2be <__mulsf3x>
 29c:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <__fp_round>
 2a0:	0e 94 c2 01 	call	0x384	; 0x384 <__fp_pscA>
 2a4:	38 f0       	brcs	.+14     	; 0x2b4 <__mulsf3+0x1c>
 2a6:	0e 94 c9 01 	call	0x392	; 0x392 <__fp_pscB>
 2aa:	20 f0       	brcs	.+8      	; 0x2b4 <__mulsf3+0x1c>
 2ac:	95 23       	and	r25, r21
 2ae:	11 f0       	breq	.+4      	; 0x2b4 <__mulsf3+0x1c>
 2b0:	0c 94 b9 01 	jmp	0x372	; 0x372 <__fp_inf>
 2b4:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__fp_nan>
 2b8:	11 24       	eor	r1, r1
 2ba:	0c 94 04 02 	jmp	0x408	; 0x408 <__fp_szero>

000002be <__mulsf3x>:
 2be:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__fp_split3>
 2c2:	70 f3       	brcs	.-36     	; 0x2a0 <__mulsf3+0x8>

000002c4 <__mulsf3_pse>:
 2c4:	95 9f       	mul	r25, r21
 2c6:	c1 f3       	breq	.-16     	; 0x2b8 <__mulsf3+0x20>
 2c8:	95 0f       	add	r25, r21
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	55 1f       	adc	r21, r21
 2ce:	62 9f       	mul	r22, r18
 2d0:	f0 01       	movw	r30, r0
 2d2:	72 9f       	mul	r23, r18
 2d4:	bb 27       	eor	r27, r27
 2d6:	f0 0d       	add	r31, r0
 2d8:	b1 1d       	adc	r27, r1
 2da:	63 9f       	mul	r22, r19
 2dc:	aa 27       	eor	r26, r26
 2de:	f0 0d       	add	r31, r0
 2e0:	b1 1d       	adc	r27, r1
 2e2:	aa 1f       	adc	r26, r26
 2e4:	64 9f       	mul	r22, r20
 2e6:	66 27       	eor	r22, r22
 2e8:	b0 0d       	add	r27, r0
 2ea:	a1 1d       	adc	r26, r1
 2ec:	66 1f       	adc	r22, r22
 2ee:	82 9f       	mul	r24, r18
 2f0:	22 27       	eor	r18, r18
 2f2:	b0 0d       	add	r27, r0
 2f4:	a1 1d       	adc	r26, r1
 2f6:	62 1f       	adc	r22, r18
 2f8:	73 9f       	mul	r23, r19
 2fa:	b0 0d       	add	r27, r0
 2fc:	a1 1d       	adc	r26, r1
 2fe:	62 1f       	adc	r22, r18
 300:	83 9f       	mul	r24, r19
 302:	a0 0d       	add	r26, r0
 304:	61 1d       	adc	r22, r1
 306:	22 1f       	adc	r18, r18
 308:	74 9f       	mul	r23, r20
 30a:	33 27       	eor	r19, r19
 30c:	a0 0d       	add	r26, r0
 30e:	61 1d       	adc	r22, r1
 310:	23 1f       	adc	r18, r19
 312:	84 9f       	mul	r24, r20
 314:	60 0d       	add	r22, r0
 316:	21 1d       	adc	r18, r1
 318:	82 2f       	mov	r24, r18
 31a:	76 2f       	mov	r23, r22
 31c:	6a 2f       	mov	r22, r26
 31e:	11 24       	eor	r1, r1
 320:	9f 57       	subi	r25, 0x7F	; 127
 322:	50 40       	sbci	r21, 0x00	; 0
 324:	9a f0       	brmi	.+38     	; 0x34c <__mulsf3_pse+0x88>
 326:	f1 f0       	breq	.+60     	; 0x364 <__mulsf3_pse+0xa0>
 328:	88 23       	and	r24, r24
 32a:	4a f0       	brmi	.+18     	; 0x33e <__mulsf3_pse+0x7a>
 32c:	ee 0f       	add	r30, r30
 32e:	ff 1f       	adc	r31, r31
 330:	bb 1f       	adc	r27, r27
 332:	66 1f       	adc	r22, r22
 334:	77 1f       	adc	r23, r23
 336:	88 1f       	adc	r24, r24
 338:	91 50       	subi	r25, 0x01	; 1
 33a:	50 40       	sbci	r21, 0x00	; 0
 33c:	a9 f7       	brne	.-22     	; 0x328 <__mulsf3_pse+0x64>
 33e:	9e 3f       	cpi	r25, 0xFE	; 254
 340:	51 05       	cpc	r21, r1
 342:	80 f0       	brcs	.+32     	; 0x364 <__mulsf3_pse+0xa0>
 344:	0c 94 b9 01 	jmp	0x372	; 0x372 <__fp_inf>
 348:	0c 94 04 02 	jmp	0x408	; 0x408 <__fp_szero>
 34c:	5f 3f       	cpi	r21, 0xFF	; 255
 34e:	e4 f3       	brlt	.-8      	; 0x348 <__mulsf3_pse+0x84>
 350:	98 3e       	cpi	r25, 0xE8	; 232
 352:	d4 f3       	brlt	.-12     	; 0x348 <__mulsf3_pse+0x84>
 354:	86 95       	lsr	r24
 356:	77 95       	ror	r23
 358:	67 95       	ror	r22
 35a:	b7 95       	ror	r27
 35c:	f7 95       	ror	r31
 35e:	e7 95       	ror	r30
 360:	9f 5f       	subi	r25, 0xFF	; 255
 362:	c1 f7       	brne	.-16     	; 0x354 <__mulsf3_pse+0x90>
 364:	fe 2b       	or	r31, r30
 366:	88 0f       	add	r24, r24
 368:	91 1d       	adc	r25, r1
 36a:	96 95       	lsr	r25
 36c:	87 95       	ror	r24
 36e:	97 f9       	bld	r25, 7
 370:	08 95       	ret

00000372 <__fp_inf>:
 372:	97 f9       	bld	r25, 7
 374:	9f 67       	ori	r25, 0x7F	; 127
 376:	80 e8       	ldi	r24, 0x80	; 128
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	60 e0       	ldi	r22, 0x00	; 0
 37c:	08 95       	ret

0000037e <__fp_nan>:
 37e:	9f ef       	ldi	r25, 0xFF	; 255
 380:	80 ec       	ldi	r24, 0xC0	; 192
 382:	08 95       	ret

00000384 <__fp_pscA>:
 384:	00 24       	eor	r0, r0
 386:	0a 94       	dec	r0
 388:	16 16       	cp	r1, r22
 38a:	17 06       	cpc	r1, r23
 38c:	18 06       	cpc	r1, r24
 38e:	09 06       	cpc	r0, r25
 390:	08 95       	ret

00000392 <__fp_pscB>:
 392:	00 24       	eor	r0, r0
 394:	0a 94       	dec	r0
 396:	12 16       	cp	r1, r18
 398:	13 06       	cpc	r1, r19
 39a:	14 06       	cpc	r1, r20
 39c:	05 06       	cpc	r0, r21
 39e:	08 95       	ret

000003a0 <__fp_round>:
 3a0:	09 2e       	mov	r0, r25
 3a2:	03 94       	inc	r0
 3a4:	00 0c       	add	r0, r0
 3a6:	11 f4       	brne	.+4      	; 0x3ac <__fp_round+0xc>
 3a8:	88 23       	and	r24, r24
 3aa:	52 f0       	brmi	.+20     	; 0x3c0 <__fp_round+0x20>
 3ac:	bb 0f       	add	r27, r27
 3ae:	40 f4       	brcc	.+16     	; 0x3c0 <__fp_round+0x20>
 3b0:	bf 2b       	or	r27, r31
 3b2:	11 f4       	brne	.+4      	; 0x3b8 <__fp_round+0x18>
 3b4:	60 ff       	sbrs	r22, 0
 3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <__fp_round+0x20>
 3b8:	6f 5f       	subi	r22, 0xFF	; 255
 3ba:	7f 4f       	sbci	r23, 0xFF	; 255
 3bc:	8f 4f       	sbci	r24, 0xFF	; 255
 3be:	9f 4f       	sbci	r25, 0xFF	; 255
 3c0:	08 95       	ret

000003c2 <__fp_split3>:
 3c2:	57 fd       	sbrc	r21, 7
 3c4:	90 58       	subi	r25, 0x80	; 128
 3c6:	44 0f       	add	r20, r20
 3c8:	55 1f       	adc	r21, r21
 3ca:	59 f0       	breq	.+22     	; 0x3e2 <__fp_splitA+0x10>
 3cc:	5f 3f       	cpi	r21, 0xFF	; 255
 3ce:	71 f0       	breq	.+28     	; 0x3ec <__fp_splitA+0x1a>
 3d0:	47 95       	ror	r20

000003d2 <__fp_splitA>:
 3d2:	88 0f       	add	r24, r24
 3d4:	97 fb       	bst	r25, 7
 3d6:	99 1f       	adc	r25, r25
 3d8:	61 f0       	breq	.+24     	; 0x3f2 <__fp_splitA+0x20>
 3da:	9f 3f       	cpi	r25, 0xFF	; 255
 3dc:	79 f0       	breq	.+30     	; 0x3fc <__fp_splitA+0x2a>
 3de:	87 95       	ror	r24
 3e0:	08 95       	ret
 3e2:	12 16       	cp	r1, r18
 3e4:	13 06       	cpc	r1, r19
 3e6:	14 06       	cpc	r1, r20
 3e8:	55 1f       	adc	r21, r21
 3ea:	f2 cf       	rjmp	.-28     	; 0x3d0 <__fp_split3+0xe>
 3ec:	46 95       	lsr	r20
 3ee:	f1 df       	rcall	.-30     	; 0x3d2 <__fp_splitA>
 3f0:	08 c0       	rjmp	.+16     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3f2:	16 16       	cp	r1, r22
 3f4:	17 06       	cpc	r1, r23
 3f6:	18 06       	cpc	r1, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	f1 cf       	rjmp	.-30     	; 0x3de <__fp_splitA+0xc>
 3fc:	86 95       	lsr	r24
 3fe:	71 05       	cpc	r23, r1
 400:	61 05       	cpc	r22, r1
 402:	08 94       	sec
 404:	08 95       	ret

00000406 <__fp_zero>:
 406:	e8 94       	clt

00000408 <__fp_szero>:
 408:	bb 27       	eor	r27, r27
 40a:	66 27       	eor	r22, r22
 40c:	77 27       	eor	r23, r23
 40e:	cb 01       	movw	r24, r22
 410:	97 f9       	bld	r25, 7
 412:	08 95       	ret

00000414 <_exit>:
 414:	f8 94       	cli

00000416 <__stop_program>:
 416:	ff cf       	rjmp	.-2      	; 0x416 <__stop_program>
